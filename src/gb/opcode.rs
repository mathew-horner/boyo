const OPCODE_MAP: [[Option<Opcode>; 16]; 16] = [
	[Some(Opcode::NOP),      Some(Opcode::LD_BC_d16), Some(Opcode::LD_BC_A),       Some(Opcode::INC_BC),  Some(Opcode::INC_B),         Some(Opcode::DEC_B),    Some(Opcode::LD_B_d8),  Some(Opcode::RLCA),             Some(Opcode::LD_a16_SP),        Some(Opcode::ADD_HL_BC), Some(Opcode::LD_A_BC),       Some(Opcode::DEC_BC),    Some(Opcode::INC_C),      Some(Opcode::DEC_C),    Some(Opcode::LD_C_d8),  Some(Opcode::RRCA)    ],
	[Some(Opcode::STOP_0),   Some(Opcode::LD_DE_d16), Some(Opcode::LD_DE_A),       Some(Opcode::INC_DE),  Some(Opcode::INC_D),         Some(Opcode::DEC_D),    Some(Opcode::LD_D_d8),  Some(Opcode::RLA),              Some(Opcode::JR_r8),            Some(Opcode::ADD_HL_DE), Some(Opcode::LD_A_DE),       Some(Opcode::DEC_DE),    Some(Opcode::INC_E),      Some(Opcode::DEC_E),    Some(Opcode::LD_E_d8),  Some(Opcode::RRA)     ],
	[Some(Opcode::JR_NZ_r8), Some(Opcode::LD_HL_d16), Some(Opcode::LD_HL_plus_A),  Some(Opcode::INC_HL),  Some(Opcode::INC_H),         Some(Opcode::DEC_H),    Some(Opcode::LD_H_d8),  Some(Opcode::DAA),              Some(Opcode::JR_Z_r8),          Some(Opcode::ADD_HL_HL), Some(Opcode::LD_A_HL_),      Some(Opcode::DEC_HL),    Some(Opcode::INC_L),      Some(Opcode::DEC_L),    Some(Opcode::LD_L_d8),  Some(Opcode::CPL)     ],
	[Some(Opcode::JR_NC_r8), Some(Opcode::LD_SP_d16), Some(Opcode::LD_HL_minus_A), Some(Opcode::INC_SP),  Some(Opcode::INC_atHL),      Some(Opcode::DEC_atHL), Some(Opcode::LD_HL_d8), Some(Opcode::SCF),              Some(Opcode::JR_C_r8),          Some(Opcode::ADD_HL_SP), Some(Opcode::LD_A_HL_minus), Some(Opcode::DEC_SP),    Some(Opcode::INC_A),      Some(Opcode::DEC_A),    Some(Opcode::LD_A_d8),  Some(Opcode::CCF)     ],
	[Some(Opcode::LD_B_B),   Some(Opcode::LD_B_C),    Some(Opcode::LD_B_D),        Some(Opcode::LD_B_E),  Some(Opcode::LD_B_H),        Some(Opcode::LD_B_L),   Some(Opcode::LD_B_HL),  Some(Opcode::LD_B_A),           Some(Opcode::LD_C_B),           Some(Opcode::LD_C_C),    Some(Opcode::LD_C_D),        Some(Opcode::LD_C_E),    Some(Opcode::LD_C_H),     Some(Opcode::LD_C_L),   Some(Opcode::LD_C_HL),  Some(Opcode::LD_C_A)  ],
	[Some(Opcode::LD_D_B),   Some(Opcode::LD_D_C),    Some(Opcode::LD_D_D),        Some(Opcode::LD_D_E),  Some(Opcode::LD_D_H),        Some(Opcode::LD_D_L),   Some(Opcode::LD_D_HL),  Some(Opcode::LD_D_A),           Some(Opcode::LD_E_B),           Some(Opcode::LD_E_C),    Some(Opcode::LD_E_D),        Some(Opcode::LD_E_E),    Some(Opcode::LD_E_H),     Some(Opcode::LD_E_L),   Some(Opcode::LD_E_HL),  Some(Opcode::LD_E_A)  ],
	[Some(Opcode::LD_H_B),   Some(Opcode::LD_H_C),    Some(Opcode::LD_H_D),        Some(Opcode::LD_H_E),  Some(Opcode::LD_H_H),        Some(Opcode::LD_H_L),   Some(Opcode::LD_H_HL),  Some(Opcode::LD_H_A),           Some(Opcode::LD_L_B),           Some(Opcode::LD_L_C),    Some(Opcode::LD_L_D),        Some(Opcode::LD_L_E),    Some(Opcode::LD_L_H),     Some(Opcode::LD_L_L),   Some(Opcode::LD_L_HL),  Some(Opcode::LD_L_A)  ],
	[Some(Opcode::LD_HL_B),  Some(Opcode::LD_HL_C),   Some(Opcode::LD_HL_D),       Some(Opcode::LD_HL_E), Some(Opcode::LD_HL_H),       Some(Opcode::LD_HL_L),  Some(Opcode::HALT),     Some(Opcode::LD_HL_A),          Some(Opcode::LD_A_B),           Some(Opcode::LD_A_C),    Some(Opcode::LD_A_D),        Some(Opcode::LD_A_E),    Some(Opcode::LD_A_H),     Some(Opcode::LD_A_L),   Some(Opcode::LD_A_HL),  Some(Opcode::LD_A_A)  ],
	[Some(Opcode::ADD_A_B),  Some(Opcode::ADD_A_C),   Some(Opcode::ADD_A_D),       Some(Opcode::ADD_A_E), Some(Opcode::ADD_A_H),       Some(Opcode::ADD_A_L),  Some(Opcode::ADD_A_HL), Some(Opcode::ADD_A_A),          Some(Opcode::ADC_A_B),          Some(Opcode::ADC_A_C),   Some(Opcode::ADC_A_D),       Some(Opcode::ADC_A_E),   Some(Opcode::ADC_A_H),    Some(Opcode::ADC_A_L),  Some(Opcode::ADC_A_HL), Some(Opcode::ADC_A_A) ],
	[Some(Opcode::SUB_B),    Some(Opcode::SUB_C),     Some(Opcode::SUB_D),         Some(Opcode::SUB_E),   Some(Opcode::SUB_H),         Some(Opcode::SUB_L),    Some(Opcode::SUB_HL),   Some(Opcode::SUB_A),            Some(Opcode::SBC_A_B),          Some(Opcode::SBC_A_C),   Some(Opcode::SBC_A_D),       Some(Opcode::SBC_A_E),   Some(Opcode::SBC_A_H),    Some(Opcode::SBC_A_L),  Some(Opcode::SBC_A_HL), Some(Opcode::SBC_A_A) ],
	[Some(Opcode::AND_B),    Some(Opcode::AND_C),     Some(Opcode::AND_D),         Some(Opcode::AND_E),   Some(Opcode::AND_H),         Some(Opcode::AND_L),    Some(Opcode::AND_HL),   Some(Opcode::AND_A),            Some(Opcode::XOR_B),            Some(Opcode::XOR_C),     Some(Opcode::XOR_D),         Some(Opcode::XOR_E),     Some(Opcode::XOR_H),      Some(Opcode::XOR_L),    Some(Opcode::XOR_HL),   Some(Opcode::XOR_A)   ],
	[Some(Opcode::OR_B),     Some(Opcode::OR_C),      Some(Opcode::OR_D),          Some(Opcode::OR_E),    Some(Opcode::OR_H),          Some(Opcode::OR_L),     Some(Opcode::OR_HL),    Some(Opcode::OR_A),             Some(Opcode::CP_B),             Some(Opcode::CP_C),      Some(Opcode::CP_D),          Some(Opcode::CP_E),      Some(Opcode::CP_H),       Some(Opcode::CP_L),     Some(Opcode::CP_HL),    Some(Opcode::CP_A)    ],
	[Some(Opcode::RET_NZ),   Some(Opcode::POP_BC),    Some(Opcode::JP_NZ_a16),     Some(Opcode::JP_a16),  Some(Opcode::CALL_NZ_a16),   Some(Opcode::PUSH_BC),  Some(Opcode::ADD_A_d8), Some(Opcode::RST_00H),          Some(Opcode::RET_Z),            Some(Opcode::RET),       Some(Opcode::JP_Z_a16),      Some(Opcode::PREFIX_CB), Some(Opcode::CALL_Z_a16), Some(Opcode::CALL_a16), Some(Opcode::ADC_A_d8), Some(Opcode::RST_08H) ],
	[Some(Opcode::RET_NC),   Some(Opcode::POP_DE),    Some(Opcode::JP_NC_a16),     None,                  Some(Opcode::CALL_NC_a16),   Some(Opcode::PUSH_DE),  Some(Opcode::SUB_d8),   Some(Opcode::RST_10H),          Some(Opcode::RET_C),            Some(Opcode::RETI),      Some(Opcode::JP_C_a16),      None,                    Some(Opcode::CALL_C_a16), None,                   Some(Opcode::SBC_A_d8), Some(Opcode::RST_18H) ],
	[Some(Opcode::LDH_a8_A), Some(Opcode::POP_HL),    Some(Opcode::LD_atC_A),      None,                  None,                        Some(Opcode::PUSH_HL),  Some(Opcode::AND_d8),   Some(Opcode::RST_20H),          Some(Opcode::ADD_SP_r8),        Some(Opcode::JP_HL),     Some(Opcode::LD_a16_A),      None,                    None,                     None,                   Some(Opcode::XOR_d8),   Some(Opcode::RST_28H) ],
	[Some(Opcode::LDH_A_a8), Some(Opcode::POP_AF),    Some(Opcode::LD_A_atC),      Some(Opcode::DI),      None,                        Some(Opcode::PUSH_AF),  Some(Opcode::OR_d8),    Some(Opcode::RST_30H),          Some(Opcode::LD_HL_SP_plus_r8), Some(Opcode::LD_SP_HL),  Some(Opcode::LD_A_a16),      Some(Opcode::EI),        None,                     None,                   Some(Opcode::CP_d8),    Some(Opcode::RST_38H) ],
];

const OPCODE_SIZES: [[u8; 16]; 16] = [
	[1, 3, 1, 1, 1, 1, 2, 1, 3, 1, 1, 1, 1, 1, 2, 1],
	[2, 3, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1],
	[2, 3, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1],
	[2, 3, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1],
	[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
	[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
	[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
	[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
	[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
	[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
	[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
	[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
	[1, 1, 3, 3, 3, 1, 2, 1, 1, 1, 3, 1, 3, 3, 2, 1],
	[1, 1, 3, 0, 3, 1, 2, 1, 1, 1, 3, 0, 3, 0, 2, 1],
	[2, 1, 2, 0, 0, 1, 2, 1, 2, 1, 3, 0, 0, 0, 2, 1],
	[2, 1, 2, 1, 0, 1, 2, 1, 2, 1, 3, 1, 0, 0, 2, 1],
];

const OPCODE_BASE_CYCLES: [[u8; 16]; 16] = [
	[4,  12, 8,  8,  4,  4,  8,  4,  20, 8,  8,  8, 4,  4,  8, 4],
	[4,  12, 8,  8,  4,  4,  8,  4,  12, 8,  8,  8, 4,  4,  8, 4],
	[8,  12, 8,  8,  4,  4,  8,  4,  8,  8,  8,  8, 4,  4,  8, 4],
	[8,  12, 8,  8,  12, 12, 12, 4,  8,  8,  8,  8, 4,  4,  8, 4],
	[4,  4,  4,  4,  4,  4,  8,  4,  4,  4,  4,  4, 4,  4,  8, 4],
	[4,  4,  4,  4,  4,  4,  8,  4,  4,  4,  4,  4, 4,  4,  8, 4],
	[4,  4,  4,  4,  4,  4,  8,  4,  4,  4,  4,  4, 4,  4,  8, 4],
	[8,  8,  8,  8,  8,  8,  4,  8,  4,  4,  4,  4, 4,  4,  8, 4],
	[4,  4,  4,  4,  4,  4,  8,  4,  4,  4,  4,  4, 4,  4,  8, 4],
	[4,  4,  4,  4,  4,  4,  8,  4,  4,  4,  4,  4, 4,  4,  8, 4],
	[4,  4,  4,  4,  4,  4,  8,  4,  4,  4,  4,  4, 4,  4,  8, 4],
	[4,  4,  4,  4,  4,  4,  8,  4,  4,  4,  4,  4, 4,  4,  8, 4],
	[8,  12, 12, 16, 12, 16, 8,  16, 8,  16, 12, 4, 12, 24, 8, 16],
	[8,  12, 12, 0,  12, 16, 8,  16, 8,  16, 12, 0, 12, 0,  8, 16],
	[12, 12, 8,  0,  0,  16, 8,  16, 16, 4,  16, 0, 0,  0,  8, 16],
	[12, 12, 8,  4,  0,  16, 8,  16, 12, 8,  16, 4, 0,  0,  8, 16],
];

#[allow(non_camel_case_types)]
#[derive(Clone)]
pub enum Opcode {
	NOP,
	LD_BC_d16,
	LD_BC_A,
	INC_BC,
	INC_B,
	DEC_B,
	LD_B_d8,
	RLCA,
	LD_a16_SP,
	ADD_HL_BC,
	LD_A_BC,
	DEC_BC,
	INC_C,
	DEC_C,
	LD_C_d8,
	RRCA,
	STOP_0,
	LD_DE_d16,
	LD_DE_A,
	INC_DE,
	INC_D,
	DEC_D,
	LD_D_d8,
	RLA,
	JR_r8,
	ADD_HL_DE,
	LD_A_DE,
	DEC_DE,
	INC_E,
	DEC_E,
	LD_E_d8,
	RRA,
	JR_NZ_r8,
	LD_HL_d16,
	LD_HL_plus_A,
	INC_HL,
	INC_H,
	DEC_H,
	LD_H_d8,
	DAA,
	JR_Z_r8,
	ADD_HL_HL,
	LD_A_HL_,
	DEC_HL,
	INC_L,
	DEC_L,
	LD_L_d8,
	CPL,
	JR_NC_r8,
	LD_SP_d16,
	LD_HL_minus_A,
	INC_SP,
	INC_atHL,
	DEC_atHL,
	LD_HL_d8,
	SCF,
	JR_C_r8,
	ADD_HL_SP,
	LD_A_HL_minus,
	DEC_SP,
	INC_A,
	DEC_A,
	LD_A_d8,
	CCF,
	LD_B_B,
	LD_B_C,
	LD_B_D,
	LD_B_E,
	LD_B_H,
	LD_B_L,
	LD_B_HL,
	LD_B_A,
	LD_C_B,
	LD_C_C,
	LD_C_D,
	LD_C_E,
	LD_C_H,
	LD_C_L,
	LD_C_HL,
	LD_C_A,
	LD_D_B,
	LD_D_C,
	LD_D_D,
	LD_D_E,
	LD_D_H,
	LD_D_L,
	LD_D_HL,
	LD_D_A,
	LD_E_B,
	LD_E_C,
	LD_E_D,
	LD_E_E,
	LD_E_H,
	LD_E_L,
	LD_E_HL,
	LD_E_A,
	LD_H_B,
	LD_H_C,
	LD_H_D,
	LD_H_E,
	LD_H_H,
	LD_H_L,
	LD_H_HL,
	LD_H_A,
	LD_L_B,
	LD_L_C,
	LD_L_D,
	LD_L_E,
	LD_L_H,
	LD_L_L,
	LD_L_HL,
	LD_L_A,
	LD_HL_B,
	LD_HL_C,
	LD_HL_D,
	LD_HL_E,
	LD_HL_H,
	LD_HL_L,
	HALT,
	LD_HL_A,
	LD_A_B,
	LD_A_C,
	LD_A_D,
	LD_A_E,
	LD_A_H,
	LD_A_L,
	LD_A_HL,
	LD_A_A,
	ADD_A_B,
	ADD_A_C,
	ADD_A_D,
	ADD_A_E,
	ADD_A_H,
	ADD_A_L,
	ADD_A_HL,
	ADD_A_A,
	ADC_A_B,
	ADC_A_C,
	ADC_A_D,
	ADC_A_E,
	ADC_A_H,
	ADC_A_L,
	ADC_A_HL,
	ADC_A_A,
	SUB_B,
	SUB_C,
	SUB_D,
	SUB_E,
	SUB_H,
	SUB_L,
	SUB_HL,
	SUB_A,
	SBC_A_B,
	SBC_A_C,
	SBC_A_D,
	SBC_A_E,
	SBC_A_H,
	SBC_A_L,
	SBC_A_HL,
	SBC_A_A,
	AND_B,
	AND_C,
	AND_D,
	AND_E,
	AND_H,
	AND_L,
	AND_HL,
	AND_A,
	XOR_B,
	XOR_C,
	XOR_D,
	XOR_E,
	XOR_H,
	XOR_L,
	XOR_HL,
	XOR_A,
	OR_B,
	OR_C,
	OR_D,
	OR_E,
	OR_H,
	OR_L,
	OR_HL,
	OR_A,
	CP_B,
	CP_C,
	CP_D,
	CP_E,
	CP_H,
	CP_L,
	CP_HL,
	CP_A,
	RET_NZ,
	POP_BC,
	JP_NZ_a16,
	JP_a16,
	CALL_NZ_a16,
	PUSH_BC,
	ADD_A_d8,
	RST_00H,
	RET_Z,
	RET,
	JP_Z_a16,
	PREFIX_CB,
	CALL_Z_a16,
	CALL_a16,
	ADC_A_d8,
	RST_08H,
	RET_NC,
	POP_DE,
	JP_NC_a16,
	CALL_NC_a16,
	PUSH_DE,
	SUB_d8,
	RST_10H,
	RET_C,
	RETI,
	JP_C_a16,
	CALL_C_a16,
	SBC_A_d8,
	RST_18H,
	LDH_a8_A,
	POP_HL,
	LD_atC_A,
	PUSH_HL,
	AND_d8,
	RST_20H,
	ADD_SP_r8,
	JP_HL,
	LD_a16_A,
	XOR_d8,
	RST_28H,
	LDH_A_a8,
	POP_AF,
	LD_A_atC,
	DI,
	PUSH_AF,
	OR_d8,
	RST_30H,
	LD_HL_SP_plus_r8,
	LD_SP_HL,
	LD_A_a16,
	EI,
	CP_d8,
	RST_38H,
}

impl Opcode {
    pub fn parse(opcode: u8) -> Option<Self> {
        let (row, col) = Self::get_indices(opcode);
        OPCODE_MAP[row][col].clone()
    }

    pub fn size(opcode: u8) -> u8 {
        let (row, col) = Self::get_indices(opcode);
        OPCODE_SIZES[row][col]
    }

    pub fn base_cycles(opcode: u8) -> u8 {
        let (row, col) = Self::get_indices(opcode);
        OPCODE_BASE_CYCLES[row][col]
    }

    fn get_indices(opcode: u8) -> (usize, usize) {
        ((opcode >> 4) as usize, (opcode & 0xF) as usize)
    }
}